<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Binary Of Felix]]></title>
  <link href="http://www.starfelix.com/atom.xml" rel="self"/>
  <link href="http://www.starfelix.com/"/>
  <updated>2014-10-19T17:17:22+08:00</updated>
  <id>http://www.starfelix.com/</id>
  <author>
    <name><![CDATA[Star Felix Jew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何更安全的使用Block]]></title>
    <link href="http://www.starfelix.com/blog/2014/10/19/ru-he-geng-an-quan-de-shi-yong-block/"/>
    <updated>2014-10-19T17:16:00+08:00</updated>
    <id>http://www.starfelix.com/blog/2014/10/19/ru-he-geng-an-quan-de-shi-yong-block</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AutoMator添加服务]]></title>
    <link href="http://www.starfelix.com/blog/2014/08/03/shi-yong-automatortian-jia-fu-wu/"/>
    <updated>2014-08-03T21:57:00+08:00</updated>
    <id>http://www.starfelix.com/blog/2014/08/03/shi-yong-automatortian-jia-fu-wu</id>
    <content type="html"><![CDATA[<p>前些天看到一篇讲<a href="http://www.raywenderlich.com/72021/supercharging-xcode-efficiency">增强xcode开发效率的文章</a>，文末提到Automator的妙用。虽然自己以前也简单折腾过Automator，但没有真正认识到应该如何使用Automator。这些天捣鼓一番后，跟大家分享一下我的收获，同时也希望能起到抛砖引玉的作用，各位也能分享一下你们的心得。</p>

<h1>什么是AutoMator Workflow</h1>

<p>在日常开发或者使用mac的时候，我们难免会做一些重复性的工作。但是利用 Automator Workflow 就可以快速、高效、毫不费力的完成你所有费时、重复性的手动任务。只要拖动项目，用鼠标点击就可以轻松的创建自定义的 Workflow。还可以使用你的 Automator Workflow 执行一次或多次任务——甚至可以与朋友共享 Workflow。
你可以轻松的自动处理很多工作，诸如给大量文件重命名，也可以运行事先编写好的脚本。</p>

<h1>AutoMator的类型</h1>

<p>AutoMator常用的类型有三种WorkFlow(工作流程)、Application(应用程序)、Service(服务).工作流程相当于是一个AutoMator文档，只能在Automator内部运行；应用程序是自运行的工作流程，拖到应用程序上的任何文件或文件夹均将作为该工作流程的输入；服务是可在整个 OS X 使用的关联工作流程，它们从当前应用程序或 Finder 接收文本或文件，服务会出现在“服务”菜单中。由于服务类型的Automator在使用上最为简便，所以以下均以服务类型的Automatore做例子。</p>

<h1>AutoMator的界面</h1>

<p><img src="http://www.starfelix.com/images/automator-screen.png" alt="界面" />    <br/>
1. 可选择的动作列表/变量。
2. 每个动作/变量的介绍。
3. 工作流区域，一系列的动作在这里组织。
4. 某个具体的动作的选项界面。
5. 输入输出标记，有这个标记的时候表明上一个动作的输出会作为下一个动作的输入。
6. Debug工具栏，调试work flow的时候使用
7. 日志，Debug的时候会输出每一个动作的执行情况。</p>

<h1>例子一：设置图片为retina资源</h1>

<p>作为一个iOS开发者，在图片命名中加上@2x表示其为高清图片是很常见的动作。我们可能会使用应用、脚本等手段来实现这个机械性动作。但是使用AutoMator，我们可以直接在Finder中选中文件，然后右键给其加上@2x。
<img src="http://www.starfelix.com/images/automator-eg.gif" alt="界面" />  <br/>
1. 新建一个服务类型的AutoMator
2. 修改获取的内容为文件或文件夹，应用为Finder
3. 添加“获取文件夹内容”的动作，这样我们的操作就可以对文件夹下的所有文件生效
4. 添加“过滤Finder项目”，因为我们只想对图片文件进行操作，而且我们不想重复添加@2x
5. 添加“给Finder项目重命名”，选择添加文本，给名称后面加上@2x。
<img src="http://www.starfelix.com/images/automator-eg1.gif" alt="界面" />  <br/>
OK，大功告成。保存为“设置为retina图片”。现在在Finder随便选择一个图片，右键选择服务->设置为retina图片，可以看到文件名被自动添加上@2x。</p>

<h1>例子二：在Finder打开</h1>

<p>公司的项目中，图片资源都是用脚本的方式拷贝到设备上，在工程里面看不到，以至于每次在Finder中寻找图片文件都比较麻烦。现在用AutoMator就简单多了。</p>

<ol>
<li>新建一个服务类型的AutoMator</li>
<li>修改应用为Xcode</li>
<li>添加“运行shell脚本”，在右上角的“传递输入”改为“作为自变量”。这样在我们的脚本中就可以使用“$@”代表输入内容。然后脚本内容输入“basename $@ .png”(去掉后缀)。</li>
<li>再次添加“运行shell脚本”，同样设置为“作为自变量”。脚本内容输入“mdfind -name $@”(用Spotlight搜索)</li>
<li>添加“显示Finder项目”，这样工作流运行结束的时候就会自动打开Finder了。</li>
</ol>


<p>保存后，打开Xcode，在代码中随意选中一个文件名（比如&#8221;logo.png&#8221;），然后右键选择“在Finder打开”(如果没有找到，就找服务里面)。然后你就可以看到相应的文件在Finder中打开了。</p>

<h1>调试</h1>

<p>有时候我们写出来的工作流不是马上就能工作的，这个时候就需要调试。在Debug面板点击“步骤”按钮就自动开始逐步调试，日志面板会输出每一步执行的信息。需要注意的是，像之前我们添加的Automator都是服务类型，那么调试的时候我们需要使用“获得指定的文本”之类的工作来代替输入源。
<img src="http://www.starfelix.com/images/automator-debug.png" alt="界面" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在ios5以上的系统都使用NSAttributedString]]></title>
    <link href="http://www.starfelix.com/blog/2014/07/20/ru-he-zai-ios5yi-shang-de-xi-tong-du-shi-yong-nsattributedstring/"/>
    <updated>2014-07-20T21:48:00+08:00</updated>
    <id>http://www.starfelix.com/blog/2014/07/20/ru-he-zai-ios5yi-shang-de-xi-tong-du-shi-yong-nsattributedstring</id>
    <content type="html"><![CDATA[<p>前几日遇到一个产品需求，需要将一段文本按下面的格式显示。  <br/>
<img src="http://www.starfelix.com/images/attributedString_right.png" alt="图一：示例格式" />   <br/>
我马上想到的是用NSAttributedString，但是项目又得支持iOS5，怎么办呢？为了解决这个问题我做了以下几种尝试。</p>

<h1>方法一：CATextLayer</h1>

<p>CATextLayer是iOS提供的，可以直接使用NSAttributedString而不需要自己处理渲染行为的类库。我尝试的代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;1.Hello Everyone!This is an article which introduce how to use NSAttributedString in iOS5.</span><span class="se">\n</span><span class="s">2.这段文字需要保持每行的缩进。为了实现这种效果，我们需要使用NSAttributedString.</span><span class="se">\n</span><span class="s">3.剩下的都是废话，凑字数用的。&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CATextLayer</span> <span class="o">*</span><span class="n">textLayer</span><span class="o">=</span><span class="p">[</span><span class="n">CATextLayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>    <span class="n">textLayer</span><span class="p">.</span><span class="n">frame</span><span class="o">=</span><span class="n">UIEdgeInsetsInsetRect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">,</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">));</span>
</span><span class='line'>    <span class="n">textLayer</span><span class="p">.</span><span class="n">contentsScale</span><span class="o">=</span><span class="p">[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">].</span><span class="n">scale</span><span class="p">;</span>                                <span class="c1">//1.</span>
</span><span class='line'>    <span class="n">textLayer</span><span class="p">.</span><span class="n">wrapped</span><span class="o">=</span><span class="n">YES</span><span class="p">;</span>                                                              <span class="c1">//2.</span>
</span><span class='line'>    <span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">attStr</span><span class="o">=</span><span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range</span><span class="o">=</span><span class="p">[</span><span class="n">text</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;字数&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTForegroundColorAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)([</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">)</span> <span class="nl">range:</span><span class="n">range</span><span class="p">];</span>      <span class="c1">//3.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="n">CTFontCreateWithName</span><span class="p">((</span><span class="n">CFStringRef</span><span class="p">)</span><span class="s">@&quot;Helvetica&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">lineBreakMode</span><span class="o">=</span><span class="n">kCTLineBreakByWordWrapping</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">firstLineIndent</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">headIndent</span><span class="o">=</span><span class="p">[</span><span class="s">@&quot;1.&quot;</span> <span class="nl">sizeWithFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">]].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CTParagraphStyleSetting</span> <span class="n">paragraphStyles</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>                                          <span class="c1">//4.</span>
</span><span class='line'>        <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierLineBreakMode</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CTLineBreakMode</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">lineBreakMode</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierFirstLineHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">firstLineIndent</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">headIndent</span><span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">CTParagraphStyleRef</span> <span class="n">paragraphStyle</span> <span class="o">=</span> <span class="n">CTParagraphStyleCreate</span><span class="p">(</span><span class="n">paragraphStyles</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>       <span class="c1">//5.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCTParagraphStyleAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">paragraphStyle</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">paragraphStyle</span><span class="p">);</span>
</span><span class='line'>    <span class="n">textLayer</span><span class="p">.</span><span class="n">string</span><span class="o">=</span><span class="n">attStr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">textLayer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>部分代码的解释： <br/>
1. 设置 CATextLayer 的显示精细度。retina屏为2，非retina屏为1.  <br/>
2. 设置 CATextLayer 自动换行。  <br/>
3. 设置NSAttributedString在指定的范围(range)中字体使用红色。kCTForegroundColorAttributeName表示前景色的key，在这里可以理解为设置字体颜色的Key。  <br/>
4. CTParagraphStyleSetting 段落的格式。代码中设置了3个格式，分别表示为换行模式、首行缩进、每行缩进。  <br/>
5. 根据CTParagraphStyleSetting生成CTParagraphStyleRef。</p>

<p>记得把attStr赋给textLayer.string，应用我们的格式化字符串。运行代码后显示效果如下：  <br/>
<img src="http://www.starfelix.com/images/attributedString_wrong.png" alt="图一：示例格式" />   <br/>
很遗憾，显示不完全正确。虽然红色的部分显示正确了，但是缩进没有正确显示。我修改了一些参数，又上网找了一些资料。最后发现CATextLayer不支持段落的格式。。。</p>

<blockquote><p>注：如果遇到使用CATextLayer显示的中文字体不正确，那可能是因为系统对中文字体默认使用了日文字体。你可以在中文显示范围内指定“STHeitiSC-Light”这样就可以显示正常了。</p></blockquote>

<h1>方法二——第三方库TTTAttributedLabel</h1>

<p>最省事的办法现在行不通了，本着懒人的本性，考虑一下第三方库。<a href="https://github.com/mattt/TTTAttributedLabel">TTTAttributedLabel</a>是大神Mattt写的一个用于显示富文本的库。具体使用详见Github的项目主页，我就不再赘述。我写的代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'>    <span class="n">TTTAttributedLabel</span> <span class="o">*</span><span class="n">label</span><span class="o">=</span><span class="p">[[</span><span class="n">TTTAttributedLabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">UIEdgeInsetsInsetRect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">,</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">))];</span>
</span><span class='line'>    <span class="n">label</span><span class="p">.</span><span class="n">numberOfLines</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">label</span><span class="p">.</span><span class="n">font</span><span class="o">=</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">];</span>
</span><span class='line'>    <span class="n">label</span><span class="p">.</span><span class="n">backgroundColor</span><span class="o">=</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">label</span> <span class="nl">setText:</span><span class="n">text</span> <span class="nl">afterInheritingLabelAttributesAndConfiguringWithBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">string</span><span class="p">){</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">lineBreakMode</span><span class="o">=</span><span class="n">kCTLineBreakByWordWrapping</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">firstLineIndent</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">headIndent</span><span class="o">=</span><span class="p">[</span><span class="s">@&quot;1.&quot;</span> <span class="nl">sizeWithFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">]].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CTParagraphStyleSetting</span> <span class="n">paragraphStyles</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierLineBreakMode</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CTLineBreakMode</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">lineBreakMode</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierFirstLineHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">firstLineIndent</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">headIndent</span><span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">CTParagraphStyleRef</span> <span class="n">paragraphStyle</span> <span class="o">=</span> <span class="n">CTParagraphStyleCreate</span><span class="p">(</span><span class="n">paragraphStyles</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">string</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCTParagraphStyleAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">paragraphStyle</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>        <span class="n">CFRelease</span><span class="p">(</span><span class="n">paragraphStyle</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSRange</span> <span class="n">range</span><span class="o">=</span><span class="p">[</span><span class="n">text</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;字数&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">string</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTForegroundColorAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)([</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">)</span> <span class="nl">range:</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">string</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">label</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后显示结果如同方法一，依然无效。T_T</p>

<h1>方法三——继承CATextLayer重写渲染方法</h1>

<p>前面两个方法都行不通，最后我只能上网再找啊找，终于被我找到新的方法。虽然这个方法略繁琐，但是总比不能用的强。
首先我们需要新建一个继承于CATextLayer的类，然后重写他的渲染函数<code>drawInContext:</code>。（由于只是demo代码，所以我直接把字符串初始化的代码写到渲染函数里面了）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawInContext:</span><span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span><span class="nv">ctx</span><span class="p">{</span>
</span><span class='line'>    <span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">darkTextColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;1.Hello Everyone!This is an article which introduce how to use NSAttributedString in iOS5.</span><span class="se">\n</span><span class="s">2.这段文字需要保持每行的缩进。为了实现这种效果，我们需要使用NSAttributedString.</span><span class="se">\n</span><span class="s">3.剩下的都是废话，凑字数用的。&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">attStr</span><span class="o">=</span><span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range</span><span class="o">=</span><span class="p">[</span><span class="n">text</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;字数&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kCTForegroundColorAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="kt">id</span><span class="p">)([</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">)</span> <span class="nl">range:</span><span class="n">range</span><span class="p">];</span>      <span class="c1">//3.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="n">CTFontCreateWithName</span><span class="p">((</span><span class="n">CFStringRef</span><span class="p">)</span><span class="s">@&quot;Helvetica&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>      <span class="c1">//3.</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">lineBreakMode</span><span class="o">=</span><span class="n">kCTLineBreakByWordWrapping</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">firstLineIndent</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">headIndent</span><span class="o">=</span><span class="p">[</span><span class="s">@&quot;1.&quot;</span> <span class="nl">sizeWithFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">]].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CTParagraphStyleSetting</span> <span class="n">paragraphStyles</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>                                          <span class="c1">//4.</span>
</span><span class='line'>        <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierLineBreakMode</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CTLineBreakMode</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">lineBreakMode</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierFirstLineHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">firstLineIndent</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">headIndent</span><span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">CTParagraphStyleRef</span> <span class="n">paragraphStyle</span> <span class="o">=</span> <span class="n">CTParagraphStyleCreate</span><span class="p">(</span><span class="n">paragraphStyles</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>       <span class="c1">//5.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCTParagraphStyleAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">paragraphStyle</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">drawInRect:</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIGraphicsPopContext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">drawInContext:</span><span class="n">ctx</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参照方法一初始化，然后运行代码。
What？运行中报错？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-[__NSCFType lineBreakMode]: unrecognized selector sent to instance 0x8f1bc50</span></code></pre></td></tr></table></div></figure>


<p>这把我给苦恼的。继续上网找原因。原来是ios5以后不再使用C对象，而改使用OC对象来设置格式。我根据网上给出的信息，修改代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawInContext:</span><span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span><span class="nv">ctx</span><span class="p">{</span>
</span><span class='line'>    <span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">darkTextColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;1.Hello Everyone!This is an article which introduce how to use NSAttributedString in iOS5.</span><span class="se">\n</span><span class="s">2.这段文字需要保持每行的缩进。为了实现这种效果，我们需要使用NSAttributedString.</span><span class="se">\n</span><span class="s">3.剩下的都是废话，凑字数用的。&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">attStr</span><span class="o">=</span><span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range</span><span class="o">=</span><span class="p">[</span><span class="n">text</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;字数&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">NSParagraphStyle</span> <span class="n">class</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="n">NSForegroundColorAttributeName</span> <span class="nl">value:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">range:</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="n">NSFontAttributeName</span> <span class="nl">value:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">]</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>        <span class="n">NSMutableParagraphStyle</span> <span class="o">*</span><span class="n">paragraphStyle</span><span class="o">=</span><span class="p">[[</span><span class="n">NSMutableParagraphStyle</span> <span class="n">defaultParagraphStyle</span><span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>        <span class="n">paragraphStyle</span><span class="p">.</span><span class="n">firstLineHeadIndent</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">paragraphStyle</span><span class="p">.</span><span class="n">headIndent</span><span class="o">=</span><span class="p">[</span><span class="s">@&quot;1.&quot;</span> <span class="nl">sizeWithFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">]].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="n">NSParagraphStyleAttributeName</span> <span class="nl">value:</span><span class="n">paragraphStyle</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kCTForegroundColorAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="kt">id</span><span class="p">)([</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">)</span> <span class="nl">range:</span><span class="n">range</span><span class="p">];</span>      <span class="c1">//3.</span>
</span><span class='line'>        <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="n">CTFontCreateWithName</span><span class="p">((</span><span class="n">CFStringRef</span><span class="p">)</span><span class="s">@&quot;Helvetica&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>      <span class="c1">//3.</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">lineBreakMode</span><span class="o">=</span><span class="n">kCTLineBreakByWordWrapping</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">firstLineIndent</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">headIndent</span><span class="o">=</span><span class="p">[</span><span class="s">@&quot;1.&quot;</span> <span class="nl">sizeWithFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">systemFontOfSize:</span><span class="mi">14</span><span class="p">]].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CTParagraphStyleSetting</span> <span class="n">paragraphStyles</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>                                          <span class="c1">//4.</span>
</span><span class='line'>            <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierLineBreakMode</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CTLineBreakMode</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">lineBreakMode</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierFirstLineHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">firstLineIndent</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{.</span><span class="n">spec</span> <span class="o">=</span> <span class="n">kCTParagraphStyleSpecifierHeadIndent</span><span class="p">,</span> <span class="p">.</span><span class="n">valueSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">),</span> <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">headIndent</span><span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">CTParagraphStyleRef</span> <span class="n">paragraphStyle</span> <span class="o">=</span> <span class="n">CTParagraphStyleCreate</span><span class="p">(</span><span class="n">paragraphStyles</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>       <span class="c1">//5.</span>
</span><span class='line'>        <span class="p">[</span><span class="n">attStr</span> <span class="nl">addAttribute:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCTParagraphStyleAttributeName</span> <span class="nl">value:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">paragraphStyle</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">text</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attStr</span> <span class="nl">drawInRect:</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIGraphicsPopContext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">drawInContext:</span><span class="n">ctx</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行代码，运行没报错，运行结果如下：  <br/>
<img src="http://www.starfelix.com/images/attributedString_right.png" alt="图一：示例格式" />   <br/>
这回终于是正确的了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正确编写Designated Initializer的几个原则]]></title>
    <link href="http://www.starfelix.com/blog/2014/04/13/zheng-que-bian-xie-designated-initializerde-ji-ge-yuan-ze/"/>
    <updated>2014-04-13T22:24:00+08:00</updated>
    <id>http://www.starfelix.com/blog/2014/04/13/zheng-que-bian-xie-designated-initializerde-ji-ge-yuan-ze</id>
    <content type="html"><![CDATA[<p>Designated Initializer(指定初始化器)在Objective－C里面是很重要的概念，但是在日常开发中我们往往会忽视它的重要性，以至于我们写出的代码具有潜藏的Bug，且不易发现。保证良好的编写Designated Initializer的风格，可以让我们节约很多时间。
前段时间<a href="http://weibo.com/wufawei">@吴发伟Ted</a>分享了一篇Twitter团队的一篇博客，里面讲述了Designated Initializer正确的模板以及需要注意的问题。但是里面关于<code>initWithCoder</code>描述不是很清晰，且随后<a href="http://weibo.com/an00na">@an00na</a>给出了<a href="http://wangling.me/2014/03/objective-c-initializer-design-rules.html">不同的看法</a>。我会在接下来的文章讲述验证他们给出的编写Designated Initializer的原则，并对<code>initWithCoder</code>的分歧做一个分析，了解其背后的机制。</p>

<h1>准备工作</h1>

<p>为了能够跟踪代码的实际调用顺序，在下面的实例分析中，我将会使用<code>Xtrace</code>。这是一个在调试上非常强大的一个库，实现原理是通过Hook的方式跟踪消息。详细可以看<a href="https://github.com/johnno1962/Xtrace">Github上的说明</a>。
需要注意的是，Xtrace里面设定了不跟踪<code>initWithCoder</code>，由于我们后面分析的需要我们需要把<code>Xtrace.h</code>里面的一段代码做一些小改动：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define XTRACE_EXCLUSIONS &quot;^(initWithCoder|_UIAppearance_|&quot;\</span>
</span><span class='line'><span class="cp">    &quot;_(initializeFor|performUpdatesForPossibleChangesOf)Idiom:|&quot;\</span>
</span><span class='line'><span class="cp">    &quot;timeIntervalSinceReferenceDate)|(WithObjects(AndKeys)?|Format):$&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码标示了不跟踪的@selector，我们需要将<code>initWithCoder</code>删除，才能跟踪这个方法。 <br/>
接下来，我们需要在<code>AppDelegate.m</code>里面加入一段代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">=</span><span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">]){</span>
</span><span class='line'>        <span class="p">[</span><span class="n">Xtrace</span> <span class="nl">includeMethods:</span><span class="s">@&quot;^init&quot;</span><span class="p">];</span><span class="c1">//1.</span>
</span><span class='line'>        <span class="p">[</span><span class="n">Xtrace</span> <span class="nl">traceClass:</span><span class="p">[</span><span class="n">ViewController</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">Xtrace</span> <span class="nl">traceClass:</span><span class="p">[</span><span class="n">TestInitView</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">Xtrace</span> <span class="nl">traceClass:</span><span class="p">[</span><span class="n">SubTestInitView</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">Xtrace</span> <span class="nl">traceClass:</span><span class="p">[</span><span class="n">NSObject</span> <span class="n">class</span><span class="p">]];</span><span class="c1">//2.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>由于每个类对象调用的方法很多，为了不被干扰，声明我们只跟踪以<code>init</code>开头的方法。</li>
<li>这几行声明了我们将会跟踪的类。也就是说，一旦这些类调用了我们跟踪的方法，就会有信息输出。</li>
</ol>


<h1>分析代码</h1>

<p>我会先给出我认为应该遵循的原则，并对每个原则做实际分析。</p>

<ul>
<li><p><strong>每个类的正确初始化过程应当是按照从子类到父类的顺序，依次调用每个类的Designated Initializer。并且用父类的Designated Initializer初始化一个子类对象，也需要遵从这个过程。</strong></p></li>
<li><p><strong>如果子类指定了新的初始化器，那么在这个初始化器内部必须调用父类的Designated Initializer。并且需要重写父类的Designated Initializer，将其指向子类新的初始化器</strong></p></li>
</ul>


<p><code>TestInitView</code>是一个继承于UIView，它重新指定的初始化器为<code>initWithFrame:andName:</code>。现在，假设这个类的初始化器如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//incorrect</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在里面并没有调用UIView的Designated Initializer<code>initWithFrame:</code>。那么会有什么后果呢？ <br/>
我们用这个Designated Initializer生成一个TestInitView对象：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="n">TestInitView</span> <span class="o">*</span><span class="n">testView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TestInitView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span> <span class="nl">andName:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行程序，我们会看到Xtrce的跟踪记录如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;TestInitView 0x8c6c840&gt; initWithFrame:{} andName:&lt;__NSCFConstantString 0x6d278&gt;]
</span><span class='line'>|  [&lt;TestInitView 0x8c6c840&gt;/UIView init]
</span><span class='line'>|   [&lt;TestInitView 0x8c6c840&gt;/UIView initWithFrame:{}]
</span><span class='line'>|    [&lt;TestInitView 0x8c6c840&gt;/NSObject init]
</span><span class='line'>|    -&gt; &lt;TestInitView 0x8c6c840&gt; (init)
</span><span class='line'>|  -&gt; &lt;TestInitView 0x8c6c840&gt; (initWithFrame:)
</span><span class='line'>| -&gt; &lt;TestInitView 0x8c6c840&gt; (init)
</span><span class='line'>| -&gt; &lt;TestInitView 0x8c6c840&gt; (initWithFrame:andName:)</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>咦，似乎没有问题啊。整个继承链的初始化器都被调用了。等等，如果我们用UIView的Designated Initializer生成一个TestInitView对象会怎样呢？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="n">TestInitView</span> <span class="o">*</span><span class="n">testView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TestInitView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行代码后，我们得到的调用过程如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;TestInitView 0xa16cd40&gt;/UIView initWithFrame:{}]
</span><span class='line'>|  [&lt;TestInitView 0xa16cd40&gt;/NSObject init]
</span><span class='line'>|  -&gt; &lt;TestInitView 0xa16cd40&gt; (init)
</span><span class='line'>| -&gt; &lt;TestInitView 0xa16cd40&gt; (initWithFrame:)</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这时会发现TestInitView的初始化器<code>initWithFrame:andName:</code>没有被调用。<br/>
我们再修改下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//incorrect</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们依然使用UIView的Designated Initializer，然后运行程序得到下面的结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;TestInitView 0xa81d3f0&gt;/UIView initWithFrame:{}]
</span><span class='line'>|  [&lt;TestInitView 0xa81d3f0&gt;/NSObject init]
</span><span class='line'>|  -&gt; &lt;TestInitView 0xa81d3f0&gt; (init)
</span><span class='line'>| -&gt; &lt;TestInitView 0xa81d3f0&gt; (initWithFrame:)</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>TestInitView的初始化器依然没有被调用。原因就是没有我们没有重写父类UIView的Designated Initializer。修改后我们的最终代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//incorrect</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//super override</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">initWithFrame:</span><span class="n">frame</span> <span class="nl">andName:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续测试我们的代码，得到的结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;TestInitView 0xa549920&gt; initWithFrame:{}]
</span><span class='line'>|  [&lt;TestInitView 0xa549920&gt; initWithFrame:{} andName:&lt;__NSCFConstantString 0x6ce2c&gt;]
</span><span class='line'>|   [&lt;TestInitView 0xa549920&gt;/UIView initWithFrame:{}]
</span><span class='line'>|    [&lt;TestInitView 0xa549920&gt;/NSObject init]
</span><span class='line'>|    -&gt; &lt;TestInitView 0xa549920&gt; (init)
</span><span class='line'>|  -&gt; &lt;TestInitView 0xa549920&gt; (initWithFrame:)
</span><span class='line'>| -&gt; &lt;TestInitView 0xa549920&gt; (initWithFrame:andName:)
</span><span class='line'>| -&gt; &lt;TestInitView 0xa549920&gt; (initWithFrame:)</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>OK,运行正确！</p>

<ul>
<li><strong>你可以不自定义Designated Initializer，也可以重写父类的Designated Initializer，但需要调用直接父类的Designated Initializer。</strong></li>
</ul>


<p>也就是说，上面的代码，我们可以不写Designated Initializer，也可以这么修改：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//incorrect</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是下面这样写就是错误的，因为调用的不是直接父类的Designated Initializer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//incorrect</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>如果有多个Secondary initializers(次要初始化器)，它们之间可以任意调用，但最后必须指向Designated Initializer。在Secondary initializers内不能直接调用父类的初始化器。</strong>
这句话可能看着有点糊涂，还是让们继续看看代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="cp">#import &quot;TestInitView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TestInitView</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//super override</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">initWithFrame:</span><span class="n">frame</span> <span class="nl">andName:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Instance secondary initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span> <span class="nl">andName:</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Instance secondary initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithName2:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">initWithName:</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Class secondary initializer</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">testInitViewWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="n">TestInitView</span> <span class="o">*</span><span class="n">testView</span><span class="o">=</span><span class="p">[[</span><span class="n">TestInitView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span> <span class="nl">andName:</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">testView</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//do something here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">testView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到方法<code>initWithName2</code>调用的顺序是<code>initWithName2</code>&ndash;><code>initWithName</code>&ndash;><code>initWithFrame:andName:</code>，最后指向了Designated Initializer。同时需要注意的是，<strong>Secondary initializers不仅可以是实例方法，也可以是静态方法</strong>，如代码实例中的<code>testInitViewWithName:</code>。</p>

<h1>initWithCoder:</h1>

<p>文章开头我就提到两篇引用文章关于initWithCoder的分歧。
首先，如果直接父类也实现了NSCoding协议，那么子类的<code>initWithCoder</code>也必须调用父类的<code>initWithCoder</code>。<br/>
这点大家的观点都是相同的，<a href="https://developer.apple.com/library/mac/documentation/cocoa/Conceptual/Archiving/Articles/codingobjects.html#//apple_ref/doc/uid/20000948-BCIHBJDE">苹果官方文档</a>也是这么说的。  <br/>
主要的分歧在于当直接父类不实现NSCoding时，子类的<code>initWithCoder</code>应该调用哪个初始化器。</p>

<p>Twitter团队的那片博客给出的看法是：</p>

<blockquote><p>There’s a problem with the example provided in the documentation for initWithCoder:, specifically the call to [super (designated initializer)]. If you’re a direct subclass of NSObject, calling [super (designated initializer)] won’t call your [self (designated initializer)]. <strong>If you’re not a direct subclass of NSObject, and one of your ancestors implements a new designated initializer, calling [super (designated initializer)] WILL call your [self (designated initializer)].</strong> This means that apple’s suggestion to call super in initWithCoder encourages non-deterministic initialization behavior, and is not consistent with the solid foundations laid by the designated initializer pattern. <strong>Therefore, my recommendation is that you should treat initWithCoder: as a secondary initializer, and call [self (designated initializer)], not [super (designated initializer)], if your superclass does not conform to NSCoding.</strong></p></blockquote>

<p>直接理解有点困难，我们用代码来说话。我们新建一个类<code>SubTestInitView</code>,它继承于<code>TestInitView</code>，且它实现NSCoding协议。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>
</span><span class='line'><span class="cp">#import &quot;SubTestInitView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SubTestInitView</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span> <span class="nl">andName:</span><span class="n">name</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">subName</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">=</span><span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span> <span class="nl">andName:</span><span class="s">@&quot;&quot;</span><span class="p">]){</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCoder</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，我们在<code>initWithCoder:</code>里面调用的是TestInitView的Designated Initializer。让我们看看调用顺序(P.S. 在xib里面拖入一个View，然后指定其类型为SubTestInitView，这样就会调用其<code>initWithCoder:</code>)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;SubTestInitView 0xa00a8c0&gt; initWithCoder:&lt;UINibDecoder 0x990fa00&gt;]
</span><span class='line'>|  [&lt;SubTestInitView 0xa00a8c0&gt;/TestInitView initWithFrame:{} andName:&lt;__NSCFConstantString 0x6df0c&gt;]
</span><span class='line'>|   [&lt;SubTestInitView 0xa00a8c0&gt;/UIView initWithFrame:{}]
</span><span class='line'>|    [&lt;SubTestInitView 0xa00a8c0&gt;/NSObject init]
</span><span class='line'>|    -&gt; &lt;SubTestInitView 0xa00a8c0&gt; (init)
</span><span class='line'>|  -&gt; &lt;SubTestInitView 0xa00a8c0&gt; (initWithFrame:)
</span><span class='line'>| -&gt; &lt;SubTestInitView 0xa00a8c0&gt; (initWithFrame:andName:)
</span><span class='line'>| -&gt; &lt;SubTestInitView 0xa00a8c0&gt; (initWithCoder:)</span></code></pre></td></tr></table></div></figure>


<p>
根据引用的内容，其认为会调用顺序中有[self (designated initializer)]，也就是SubTestInitView 的<code>- (instancetype)initWithFrame:(CGRect)frame andName:(NSString *)name</code>，但是实际结果并不是这样的。子类的Designated Initializer并没有被调用。而最后其建议将<code>initWithCoder:</code>视为Secondary initializers，然后在里面调用[self (designated initializer)]。这样做的目的是为了保证[self (designated initializer)]会被调用，以保证初始化是正确的。 <br/>
对此，<a href="http://weibo.com/an00na">@an00na</a>则提出不一致的看法。 <br/>
<a href="http://weibo.com/an00na">@an00na</a>引入了数据源的概念，他认为<code>initWithCoder:</code>是用另一个数据源NSDecoder初始化的。一个类可以由多个数据源初始化，也就是说可以有多个Designated Initializer。因此，<code>initWithCoder</code>是Designated Initializer，而根据我们前面提到的原则，我们应该调用父类的Designated Initializer。 <br/>
这个时候，我产生了疑惑。按照这个说法，此时应该如代码所示，调用父类TestInitView的<code>initWithFrame:andName:</code>明显有问题，因为并非是同个数据源。可是父类并没有实现NSCoding，我们可以调用他的<code>initWithCoder</code>(实际上是UIView的)吗？ <br/>
我注意到UIButton的继承顺序是UIButton->UIControl->UIView&hellip;，UIControl同样没有实现NSCoding，那么对于这种情况，apple又是如何做的呢？我跟踪了UIButton的生成过程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;UIButton 0x9c7e400&gt; initWithFrame:{}]
</span><span class='line'>|  [&lt;UIButton 0x9c7e400&gt;/UIControl initWithFrame:{}]
</span><span class='line'>|   [&lt;UIButton 0x9c7e400&gt;/UIView initWithFrame:{}]
</span><span class='line'>|    [&lt;UIButton 0x9c7e400&gt;/NSObject init]
</span><span class='line'>|    -&gt; &lt;UIButton 0x9c7e400&gt; (init)
</span><span class='line'>|  -&gt; &lt;UIButton 0x9c7e400&gt; (initWithFrame:)
</span><span class='line'>| -&gt; &lt;UIButton 0x9c7e400&gt; (initWithFrame:)
</span><span class='line'>| -&gt; &lt;UIButton 0x9c7e400&gt; (initWithFrame:)
</span><span class='line'>2014-04-16 01:36:12.948 BlogDemo[2128:60b] -------------
</span><span class='line'>| [&lt;UIButton 0x8eba7f0&gt; initWithCoder:&lt;UINibDecoder 0x9373600&gt;]
</span><span class='line'>|  [&lt;UIButton 0x8eba7f0&gt;/UIControl initWithCoder:&lt;UINibDecoder 0x9373600&gt;]
</span><span class='line'>|   [&lt;UIButton 0x8eba7f0&gt;/UIView initWithCoder:&lt;UINibDecoder 0x9373600&gt;]
</span><span class='line'>|    [&lt;UIButton 0x8eba7f0&gt;/NSObject init]
</span><span class='line'>|    -&gt; &lt;UIButton 0x8eba7f0&gt; (init)
</span><span class='line'>|  -&gt; &lt;UIButton 0x8eba7f0&gt; (initWithCoder:)
</span><span class='line'>| -&gt; &lt;UIButton 0x8eba7f0&gt; (initWithCoder:)
</span><span class='line'>| -&gt; &lt;UIButton 0x8eba7f0&gt; (initWithCoder:)</span></code></pre></td></tr></table></div></figure>


<p>间隔线上面是以<code>[UIButton buttonWithType:UIButtonTypeCustom]</code>方式初始化的UIButton，下面的则是通过xib初始化的UIButton。我们可以看到，下面的初始化顺序并没由调用到<code>initWithFrame:</code>,这也证明了<a href="http://weibo.com/an00na">@an00na</a>关于数据源的看法。而同时可以发现中间调用了UIControl的<code>initWithCoder:</code>! <br/>
于是，在这里，我认为如果你的自定义类的其中一个父类实现了NSCoding协议，而且你有扩展属性，虽然你本身没有声明会实现NSCoding协议，你也需要实现NSCoding的两个方法：<code>initWithCoder:</code>和<code>encodeWithCoder:</code>,并对你扩展的属性做coding操作。  <br/>
给TestInitView补上这两个方法，SubTestInitView的<code>initWithCoder</code>也调用父类的<code>initWithCoder</code>后，让我们再看看实际的调用顺序：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| [&lt;SubTestInitView 0xa664e70&gt; initWithCoder:&lt;UINibDecoder 0xd880600&gt;]
</span><span class='line'>|  [&lt;SubTestInitView 0xa664e70&gt;/TestInitView initWithCoder:&lt;UINibDecoder 0xd880600&gt;]
</span><span class='line'>|   [&lt;SubTestInitView 0xa664e70&gt;/UIView initWithCoder:&lt;UINibDecoder 0xd880600&gt;]
</span><span class='line'>|    [&lt;SubTestInitView 0xa664e70&gt;/NSObject init]
</span><span class='line'>|    -&gt; &lt;SubTestInitView 0xa664e70&gt; (init)
</span><span class='line'>| -&gt; &lt;SubTestInitView 0xa664e70&gt; (initWithCoder:)
</span><span class='line'>| -&gt; &lt;SubTestInitView 0xa664e70&gt; (initWithCoder:)
</span><span class='line'>| -&gt; &lt;SubTestInitView 0xa664e70&gt; (initWithCoder:)</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>多数据源</h1>

<p>经过上面的探讨，我们了解了多数据源的设计模型。但是这带来了另外一个问题：如何使得通过不同数据源初始化动作是一致的？ <br/>
比如说，我们往往需要再对象初始化紧接着做一些动作。由于多数据源的存在，并且不同的数据源提供的数据内容不一样，我们应当如何处理？ <br/>
很自然的，我们可能会想到讲部分动作重构成一个方法，无论从哪个数据源初始化，都调用这个方法。  <br/>
如果是自己编写的不同数据源的Designated Initializer，具体调用这个方法的时机需要自己把握。我在这里着重讲一下UIView或UIViewController的子类在处理多数据源需要注意的问题。 <br/>
按前面所述，UIView和UIViewController的子类需要实现NSCoding的两个方法。但是我们需要注意的是，同样是调用initWithCoder，却仍然可能是不同的数据源：UINibDecoder或者NSKeyedUnarchiver。  <br/>
这两者分别代表什么情况呢？UINibDecoder是指xib初始化，而NSKeyedUnarchiver是指通过归档文件(如plist/txt等物理文件)初始化。它们最大的区别是UINibDecoder仅包含了xib里面能够设置的数据，而NSKeyedUnarchiver包括了整个对象的数据，也就是说如果是从NSKeyedUnarchiver初始化的，是不再需要额外的初始化动作了。而如果是从UINibDecoder初始化的，则在对象初始化后，会调用其<code>awakeFromNib</code>方法，我们需要把额外的初始化动作写在这里。 <br/>
根据这个，我再次改写了TestInitView如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;TestInitView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">TestInitView</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//super override</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">initWithFrame:</span><span class="n">frame</span> <span class="nl">andName:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">]){</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">someInit</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//correct From Name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">=</span><span class="p">[</span><span class="n">super</span> <span class="nl">initWithCoder:</span><span class="n">aDecoder</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//correct From NSKeyedUnarchiver</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCoder</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">encodeWithCoder:</span><span class="n">aCoder</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeObject:</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">awakeFromNib</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">awakeFromNib</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">someInit</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//correct From UINibDecoder</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">someInit</span><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//anyelse....</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就可以保证无论是从什么数据源初始化，得出的结果都是正确的了。事实上，如果在工程中我们没有对UIView或UIViewController的子类对象有归档的需求的话，NSCoding的两个方法可以省去不写。</p>

<h1>小技巧</h1>

<p>有时候我们可能会忘记这些需要注意的地方，幸运的是，Xcode为我们提供了一个很棒的编译警告。
在合适的文件前面加入下面一段宏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#ifndef NS_DESIGNATED_INITIALIZER</span>
</span><span class='line'><span class="cp">#if __has_attribute(objc_designated_initializer)</span>
</span><span class='line'><span class="cp">#define NS_DESIGNATED_INITIALIZER __attribute((objc_designated_initializer))</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define NS_DESIGNATED_INITIALIZER</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在你需要标示为Designated Initializer的方法后面加上 NS_DESIGNATED_INITIALIZER。如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Designated Initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">frame</span> <span class="nf">andName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="n">NS_DESIGNATED_INITIALIZER</span><span class="p">;</span>
</span><span class='line'><span class="c1">//Instance secondary initializer</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="n">__attribute</span><span class="p">((</span><span class="n">objc_designated_initializer</span><span class="p">));</span>
</span><span class='line'><span class="c1">//Class secondary initializer</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">testInitViewWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，当你没有按照规则的时候，会得到下面的警告：   <br/>
<img src="http://www.starfelix.com/images/design-warning.png" alt="图一：没有调用默认初始化器警告" /></p>

<h1>综述</h1>

<p>经过一番长篇大论:)，我们可以总结正确编写Designated Initializer的原则如下：</p>

<ol>
<li>每个类的正确初始化过程应当是按照从子类到父类的顺序，依次调用每个类的Designated Initializer。并且用父类的Designated Initializer初始化一个子类对象，也需要遵从这个过程。</li>
<li>如果子类指定了新的初始化器，那么在这个初始化器内部必须调用父类的Designated Initializer。并且需要重写父类的Designated Initializer，将其指向子类新的初始化器。</li>
<li>你可以不自定义Designated Initializer，也可以重写父类的Designated Initializer，但需要调用直接父类的Designated Initializer。</li>
<li>如果有多个Secondary initializers(次要初始化器)，它们之间可以任意调用，但最后必须指向Designated Initializer。在Secondary initializers内不能直接调用父类的初始化器。</li>
<li>如果有多个不同数据源的Designated Initializer，那么不同数据源下的Designated Initializer应该调用相应的[super (designated initializer)]。如果父类没有实现相应的方法，则需要根据实际情况来决定是给父类补充一个新的方法还是调用父类其他数据源的Designated Initializer。比如UIView的<code>initWithCoder</code>调用的是NSObject的<code>init</code>。</li>
<li>需要注意不同数据源下添加额外初始化动作的时机。</li>
</ol>


<p>P.S.尽管我做了很多实例分析研究，但经验所限可能仍有不足或不对之处，欢迎指正。本文内大量内容来源Twitter团队博客的那篇文章以及<a href="http://weibo.com/an00na">@an00na</a>的文章，我仅仅是用中文做了讲述，在此表示十分感谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLDB调试命令初探]]></title>
    <link href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/"/>
    <updated>2014-03-17T00:50:00+08:00</updated>
    <id>http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan</id>
    <content type="html"><![CDATA[<p><img src="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/art/lldb_in_xc5_command_window_2x.png" alt="../art/lldb_in_xc5_command_window_2x.png" width="562" height="183.5"><br/>
如果你在平时的开发中从未使用过调试器，那你恐怕不知道一个调试器的作用有多大。你可能只满足于通过<code>printf</code>或者<code>NSLog</code>输出信息用于调试。但你只要试着尝试在调试中开始使用调试器<em>LLDB</em>，你会马上感受到调试器给你带来的便利。<br/>
<em>LLDB</em>是<em>LLVM</em>下的调试器。Xcode从4.0开始编译器开始改用<em>LLVM</em>，相应的调试器也从<em>gdb</em>改为<em>LLDB</em>。而从 Xcode5.0开始所有工程也被自动设置为使用<em>LLDB</em>。下面本文从初学者的角度讲解在日常的开发中如何使用<em>LLDB</em>以及<em>LLDB</em>常用的命令。</p>

<h2>初识<em>LLDB</em></h2>

<p>你可能从未使用过<em>LLDB</em>，那让我们先来热热身。
在调试器中最常用到的命令是<code>p</code>（用于输出基本类型）或者<code>po</code>（用于输出 Objective-C 对象）。如下，你可以通过输入po 和 view 来输出 view 的信息:</p>

<pre><code>po [self view]
</code></pre>

<p>随后调试器会输出这个 object 的 description。在这个例子中可能是这样的信息：</p>

<pre><code>(UIView *) $1 = 0x0824c800 &lt;UITableView: 0x824c800; frame = (0 20; 768 1004); clipsToBounds = YES; autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x74c3010&gt;; layer = &lt;CALayer: 0x74c2710&gt;; contentOffset: {0, 0}&gt;
</code></pre>

<p>什么？在什么地方可以输入这个命令？OK，首先，我们需要先设置一个断点。如下图所示，我在<code>viewDidLoad:</code>中设置了一个了一个断点：</p>

<p><img src="http://www.cimgf.com/wp-content/uploads/2012/12/Screenshot-121212-1214-AM.png" alt="图二：断点图" /></p>

<p>接下来运行程序，然后程序会停留在断点处，从下图你可以看到在什么地方输入<em>LLDB</em>命令：</p>

<p><img src="http://www.cimgf.com/wp-content/uploads/2012/12/Screenshot-121212-1219-AM.png" alt="图三：输入命令位置" /></p>

<p>你可能需要的是 view 下 subview 的数量。由于 subview 的数量是一个 int 类型的值，所以我们使用命令<code>p</code>：</p>

<pre><code>p (int)[[[self view] subviews] count]
</code></pre>

<p>最后你看到的输出会是：</p>

<pre><code>(int) $2 = 2
</code></pre>

<p>是不是很简单？<br/>
细心的朋友可能会发现输出的信息中带有<code>$1</code>、<code>$2</code>的字样。实际上，我们每次查询的结果会保存在一些持续变量中($[0-9]+)，这样你可以在后面的查询中直接使用这些值。比如现在我接下来要重新取回<code>$1</code>的值：</p>

<pre><code>(lldb) po $1
(UIView *) $1 = 0x0824c800 &lt;UITableView: 0x824c800; frame = (0 20; 768 1004); clipsToBounds = YES; autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x74c3010&gt;; layer = &lt;CALayer: 0x74c2710&gt;; contentOffset: {0, 0}&gt;
</code></pre>

<p>可以看到，我们依然可以取到之前[self view]的值。</p>

<p><em>LLDB</em>命令还可以用在断点上，详细的使用可以参见<a href="http://my.oschina.net/notting/blog/115294">这个文章</a></p>

<h2>常用命令</h2>

<p>下面补充说明其它一些常用的命令：</p>

<ul>
<li>expr</li>
</ul>


<p>可以在调试时动态执行指定表达式，并将结果打印出来。常用于在调试过程中修改变量的值。<br/>
<img src="http://www.starfelix.com/images/lldb-p.png" alt="图四：expr截图" /><br/>
如图设置断点，然后运行程序。程序中断后输入下面的命令：</p>

<pre><code>expr a=2
</code></pre>

<p>你会看到如下的输出：</p>

<pre><code>(int) $0 = 2
</code></pre>

<p>继续运行程序，程序输出的信息是：</p>

<pre><code>实际值：2
</code></pre>

<p>很明显可以看出，变量a的值被改变。
除此之外，还可以使用这个命令新声明一个变量对象，如：</p>

<pre><code>expr int $b=2
p $b
</code></pre>

<p>下面的命令用于输出新声明对象的值。（注意，对象名前要加$）</p>

<ul>
<li>call</li>
</ul>


<p>call即是调用的意思。其实上述的po和p也有调用的功能。因此一般只在不需要显示输出，或是方法无返回值时使用call。
和上面的命令一样，我们依然在<code>viewDidLoad:</code>里面设置断点，然后在程序中断的时候输入下面的命令：</p>

<pre><code>call [self.view setBackgroundColor:[UIColor redColor]]
</code></pre>

<p>继续运行程序，看看view的背景颜色是不是变成红色的了！在调试的时候灵活运用call命令可以起到事半功倍的作用。</p>

<ul>
<li>bt</li>
</ul>


<p>打印调用堆栈，加all可打印所有thread的堆栈。不详细举例说明，感兴趣的朋友可以自己试试。</p>

<ul>
<li>image</li>
</ul>


<p>image 命令可用于寻址，有多个组合命令。比较实用的用法是用于寻找栈地址对应的代码位置。
下面我写了一段代码</p>

<pre><code>NSArray *arr=[[NSArray alloc] initWithObjects:@"1",@"2", nil];
NSLog(@"%@",arr[2]);
</code></pre>

<p>这段代码有明显的错误，程序运行这段代码后会抛出下面的异常：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*** Terminating app due to uncaught exception 'NSRangeException', reason: '*** -[__NSArrayI objectAtIndex:]: index 2 beyond bounds [0 .. 1]'
</span><span class='line'>*** First throw call stack:
</span><span class='line'>(
</span><span class='line'>  0   CoreFoundation                      0x0000000101951495 __exceptionPreprocess + 165
</span><span class='line'>  1   libobjc.A.dylib                     0x00000001016b099e objc_exception_throw + 43
</span><span class='line'>  2   CoreFoundation                      0x0000000101909e3f -[__NSArrayI objectAtIndex:] + 175
</span><span class='line'>  3   ControlStyleDemo                    0x0000000100004af8 -[RootViewController viewDidLoad] + 312
</span><span class='line'>  4   UIKit                               0x000000010035359e -[UIViewController loadViewIfRequired] + 562
</span><span class='line'>  5   UIKit                               0x0000000100353777 -[UIViewController view] + 29
</span><span class='line'>  6   UIKit                               0x000000010029396b -[UIWindow addRootViewControllerViewIfPossible] + 58
</span><span class='line'>  7   UIKit                               0x0000000100293c70 -[UIWindow _setHidden:forced:] + 282
</span><span class='line'>  8   UIKit                               0x000000010029cffa -[UIWindow makeKeyAndVisible] + 51
</span><span class='line'>  9   ControlStyleDemo                    0x00000001000045e0 -[AppDelegate application:didFinishLaunchingWithOptions:] + 672
</span><span class='line'>  10  UIKit                               0x00000001002583d9 -[UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:] + 264
</span><span class='line'>  11  UIKit                               0x0000000100258be1 -[UIApplication _callInitializationDelegatesForURL:payload:suspended:] + 1605
</span><span class='line'>  12  UIKit                               0x000000010025ca0c -[UIApplication _runWithURL:payload:launchOrientation:statusBarStyle:statusBarHidden:] + 660
</span><span class='line'>  13  UIKit                               0x000000010026dd4c -[UIApplication handleEvent:withNewEvent:] + 3189
</span><span class='line'>  14  UIKit                               0x000000010026e216 -[UIApplication sendEvent:] + 79
</span><span class='line'>  15  UIKit                               0x000000010025e086 _UIApplicationHandleEvent + 578
</span><span class='line'>  16  GraphicsServices                    0x0000000103aca71a _PurpleEventCallback + 762
</span><span class='line'>  17  GraphicsServices                    0x0000000103aca1e1 PurpleEventCallback + 35
</span><span class='line'>  18  CoreFoundation                      0x00000001018d3679 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 41
</span><span class='line'>  19  CoreFoundation                      0x00000001018d344e __CFRunLoopDoSource1 + 478
</span><span class='line'>  20  CoreFoundation                      0x00000001018fc903 __CFRunLoopRun + 1939
</span><span class='line'>  21  CoreFoundation                      0x00000001018fbd83 CFRunLoopRunSpecific + 467
</span><span class='line'>  22  UIKit                               0x000000010025c2e1 -[UIApplication _run] + 609
</span><span class='line'>  23  UIKit                               0x000000010025de33 UIApplicationMain + 1010
</span><span class='line'>  24  ControlStyleDemo                    0x0000000100006b73 main + 115
</span><span class='line'>  25  libdyld.dylib                       0x0000000101fe95fd start + 1
</span><span class='line'>  26  ???                                 0x0000000000000001 0x0 + 1
</span><span class='line'>)
</span><span class='line'>libc++abi.dylib: terminating with uncaught exception of type NSException</span></code></pre></td></tr></table></div></figure>


<p>现在，我们怀疑出错的地址是0x0000000100004af8（可以根据执行文件名判断，或者最小的栈地址）。为了进一步精确定位，我们可以输入以下的命令：</p>

<pre><code>image lookup --address 0x0000000100004af8
</code></pre>

<p>命令执行后返回：</p>

<pre><code>Address: ControlStyleDemo[0x0000000100004af8] (ControlStyleDemo.__TEXT.__text + 13288)
Summary: ControlStyleDemo`-[RootViewController viewDidLoad] + 312 at RootViewController.m:53
</code></pre>

<p>我们可以看到，出错的位置是<code>RootViewController.m</code>的第53行。</p>

<hr />

<p>更多的命令可以参见<a href="http://lldb.llvm.org/lldb-gdb.html">这个网址</a>。<br/>
另外，facebook开源了他们扩展的<a href="https://github.com/facebook/chisel">LLDB命令库</a>，有兴趣的朋友也可以安装看看。</p>

<h2>简称和别名</h2>

<p>很多时候，<em>LLDB</em>完整的命令是很长的。比如前面所说的<code>image lookup --address</code>这个组合命令。为了方便日常的使用，提高效率，<em>LLDB</em>命令也提供通过简称的方式调用命令。还是这个命令，我们用简称就可以写为<code>im loo -a</code>，是不是简单多了。<br/>
如果你是从gdb时代就开始使用调试器的，你会发现，有些命令如<code>p</code>、<code>call</code>等命令和<em>gdb</em>下是一致的。其实这些命令是<em>LLDB</em>一些命令的别名，比如<code>p</code>是<code>frame variable</code>的别名，<code>p view</code>实际上是<code>frame variable view</code>。除了系统自建的<em>LLDB</em>别名，你也可以自定义别名。比如下面这个命令</p>

<pre><code>command alias ioa image lookup --address %1
</code></pre>

<p>是将我前面所介绍过的一个命令<code>image lookup --address</code>添加了一个<code>ioa</code>的别名。然后执行下面的命令：</p>

<pre><code>(lldb) ioa 0x0000000100004af8
  Address: ControlStyleDemo[0x0000000100004af8] (ControlStyleDemo.__TEXT.__text + 13288)
  Summary: ControlStyleDemo`-[RootViewController viewDidLoad] + 312 at RootViewController.m:53
</code></pre>

<p>可以看到，我们得到了我们想要的结果，而命令却大大缩短。  <br/>
这里我就不再详细展开，有兴趣的朋友可以查看<a href="http://lldb.llvm.org/tutorial.html">这个网址</a>。</p>

<h2>常见问题</h2>

<p>上面我们简单的学习了如何使用<em>LLDB</em>命令。但有时我们在使用这些<em>LLDB</em>命令的时候，依然可能会遇到一些问题。</p>

<h3>不明类型或者类型不匹配</h3>

<p>比如下面这个命令。</p>

<pre><code>(lldb) p NSLog(@"%@",[self.view  viewWithTag:1001])
error: 'NSLog' has unknown return type; cast the call to its declared return type
error: 1 errors parsing expression
</code></pre>

<p>如果在使用<em>LLDB</em>命令中发现有 unknown type 的类似错误（多见于id类型，比如NSArray中某个值），那我们就必须显式声明类型。比如上面这个命令，我们得这么修改。</p>

<pre><code>p (void)NSLog(@"%@",[self.view  viewWithTag:1001])
</code></pre>

<p>这样就能得到正确的结果了。
另外，lldb是不支持宏的，需要我们自己替换。</p>

<h3>找不到方法</h3>

<p>常见于输出frame的时候。比如你可能会得到以下的错误信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(lldb) po self.view.frame
</span><span class='line'>error: unsupported expression with unknown type
</span><span class='line'>error: unsupported expression with unknown type
</span><span class='line'>error: 2 errors parsing expression</span></code></pre></td></tr></table></div></figure>


<p>这似乎是lldb的一个bug，无法通过点属性访问的方法打印framework里面的对象，但是自己在app里面定义的就可以。我们把上面的命令改动一下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(lldb) p (CGRect)[self.view frame]
</span><span class='line'>(CGRect) $0 = origin=(x=0, y=0) size=(width=320, height=480)</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>通过上面一些简单的讲解，相信朋友们已经知道如何使用<em>LLDB</em>命令来提高自己的效率了。Enjoy it！</p>
]]></content>
  </entry>
  
</feed>
